using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Security.Cryptography;
using NLog;

namespace Nopenttd
{



    /** Basic data to distinguish a scenario. Used in the server list window */
    public struct ScenarioIdentifier
    {
        /// ID for the scenario (generated by content).
        public uint scenid;
        /// MD5 checksum of file.
        public byte[] md5sum; //= new byte[16];        
        /// filename of the file.
        public string filename; 
        public static bool operator ==(ScenarioIdentifier one, ScenarioIdentifier other) 
        {
            return one.scenid == other.scenid && one.md5sum.SequenceEqual(other.md5sum);
        }

        public static bool operator !=(ScenarioIdentifier one, ScenarioIdentifier other)
        {
            return !(one == other);
        }
    }



/**
* Scanner to find the unique IDs of scenarios
*/
public class ScenarioScanner : FileScanner {//, public SmallVector<ScenarioIdentifier, 8> {

    private static readonly ILogger Log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType.FullName);.
        /// Whether we've already scanned
        bool scanned = false;
        public List<ScenarioIdentifier> items = new List<ScenarioIdentifier>();


    /**
	 * Scan, but only if it's needed.
	 * @param rescan whether to force scanning even when it's not necessary
	 */
    public void Scan(bool rescan)
    {
        if (this.scanned && !rescan) return;

        base.Scan(".id", Subdirectory.SCENARIO_DIR, true, true);
        this.scanned = true;
    }

    /* virtual */
    public override bool AddFile(string filename, string tar_filename = null)
    {
        var id = new ScenarioIdentifier();
            using (var f = FileIO.FioFOpenFile(filename, FileMode.Open, Subdirectory.SCENARIO_DIR, out var filesize))
        {
            if (f == null) return false;

            using (var reader = new StreamReader(f))
            {
                try
                {
                    id.scenid = (uint)reader.Read();
                }
                catch (Exception ex)
                {
                    Log.Debug(ex);
                    return false;
                }
            }
        }
        id.filename = filename;

            
            
            /* open the scenario file, but first get the name.
             * This is safe as we check on extension which
             * must always exist. */
             
            var basename = filename; ///a filename without the extension.
            var index = basename.LastIndexOf('.');
        if (index > 0)
        {
            basename = basename.Substring(0, index - 1);
        }
            using (var f = FileIO.FioFOpenFile(basename, FileMode.Open, Subdirectory.SCENARIO_DIR, out var filesize))
            {
                if (f == null) return false;

                /* calculate md5sum */
                var md5 = MD5.Create();
                id.md5sum = md5.ComputeHash(f);
            }
        items.Add(id);
        return true;
                
    }
    };

}